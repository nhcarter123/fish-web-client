scalar Date

input UpdateMatchPayload {
  rating: Int!
}

type Player {
  _id: String!
  xp: Int!
  gold: Int!
  rod: Int!
  lure: Int!
  bait: Int!
  line: Int!
  purchasedItems: [Int!]!
}

type Fish {
  _id: String!
  type: Int!
  username: String!
  float: Float!
  isShiny: Boolean!
  weight: Float!
  age: Float!
  rarity: Int!
  gender: Int!
  value: Int!
}

type Query {
  getFish(username: String, page: Int!, pageSize: Int!, createdSort: Int!, raritySort: Int!, valueSort: Int!, floatSort: Int!, weightSort: Int!): [Fish!]!
  getTopCatches: [Fish!]!
  getPlayer(username: String!): Player!
}

type Subscription {
  fishCaught(username: String): Fish!
  leaderboardUpdated: [Fish!]!
}


schema {
  query: Query
  subscription: Subscription
}